---

# 영속성 컨텍스트의 특징
- **영속성 컨텍스트와 식별자 값**
영속성 컨텍스트는 엔티티를 식별자 값(@Id로 테이블의 기본 키와 매핑한 값)으로 구분한다.
따라서 **영속 상태는 식별자 값이 반드시 있어야 한다!**
- **영속성 컨텍스트와 데이터베이스 저장**
이전 포스팅에서 말했듯이 JPA는 보통 트랜잭션을 커밋하는 순간 영속성 컨텍스트에 새로 저장된 엔티티를 데이터베이스에 반영한다. 이를 **플러시(flush)** 라고 한다.
- **영속성 컨텍스트가 엔티티를 관리하면 얻게되는 장점**
  + 1차 캐시
  + 동일성(identity) 보장
  + 트랜잭션을 지원하는 쓰기 지연(transactional write-behind)
  + 변경 감지(Dirty Checking)
  + 지연 로딩(Lazy Loading)
  
  ---
## 엔티티 조회, 1차 캐시

![image.png](https://images.velog.io/post-images/conatuseus/5f4d8c20-d08b-11e9-9f4f-632c92c19a43/image.png)
~~~ java
Member member = new Member();
member.setId("member1");
member.setUsername("회원1");

em.persist(member);
~~~
위 코드에서 em.persist(member) 을 실행하게 되면 member 엔티티가 영속 상태가 된다.
그리고 위 그림에서 보이는 것과 같이 그 엔티티는 영속성 컨텍스트의 1차 캐시에 저장된다.
> 1차 캐시란?
영속성 컨텍스트는 내부에 캐시를 가지고 있는데 이것을 **1차 캐시**라 한다. 영속 상태의 엔티티는 모두 이곳에 저장된다. 쉽게 말해 영속성 컨텍스트 내부에 Map이 하나 있는데 (1차 캐시), 키는 @Id로 매핑한 식별자고 값은 엔티티 인스턴스다.

### 1차 캐시가 존재해서 얻는 이점
#### 1차 캐시에서 조회
~~~ java
Member member = new Member();
member.setId("member1");
member.setUsername("회원1");

//1차 캐시에 저장
em.persist(member);

//1차 캐시에서 조회
Member findMember = em.find(Member.class, "member1");
~~~
엔티티를 조회하는 find 메서드가 실행되면
1. 1차 캐시에서 식별자 값으로 엔티티를 찾는다.
2. 만약 찾는 엔티티가 1차 캐시에 있으면 데이터베이스를 조회하지 않고 메모리에 있는 1차 캐시에서 엔티티를 조회
3. 1차 캐시에 찾는 엔티티가 없으면 데이터베이스에서 조회

아래 그림은 위 코드를 실행했을 때 일어나는 상황

![image.png](https://images.velog.io/post-images/conatuseus/996d15e0-d08d-11e9-9f4f-632c92c19a43/image.png)

#### 데이터베이스에서 조회

`em.find()`를 호출했는데 엔티티가 1차 캐시에 없으면 엔티티 매니저는 데이터베이스를 조회해서 엔티티를 생성한다. 그리고 1차 캐시에 저장한 후에 영속 상태의 엔티티를 반환한다.


![image.png](https://images.velog.io/post-images/conatuseus/d39dcef0-d095-11e9-a3f7-3fdb1399ac5a/image.png)

위 그림을 분석해보자!
1. `em.find(Member.class, "member2")`를 실행한다
2. 하지만 1차 캐시에는 member1만 있고, member2는 없는 상태다. 그래서 데이터베이스에서 member2를 조회한다
3. 조회한 데이터로 member2 엔티티를 생성해서 1차 캐시에 저장한다(영속 상태)
4. 조회한 엔티티를 반환한다
위 과정 후 member1나, member2에 대해 find를 요청하면 **데이터베이스에 접근하지 않고, 1차 캐시에 있는 엔티티를 반환할 것이다.**
1차 캐시로 인해 데이터베이스에 접근할 빈도가 줄어듦으로 성능상 이점을 얻을 수 있다.
> 1차 캐시는 한 트랜잭션 안에서만 효과가 있기 때문에 성능상 이점이 크지는 않다.

#### 영속 엔티티의 동일성 보장
~~~ java
Member a = em.find(Member.class, "member1");
Member b = em.find(Member.class, "member1");

System.out.println(a == b);
~~~
현재 member1이 영속성 컨텍스트에 존재하는 상황에서 
위 코드의 a == b 가 참일까 거짓일까? 
정답은 **참**이다.

member1을 두 번 find해서 찾은 객체인데 왜 같을까?
영속성 컨텍스트는 1차 캐시에 있는 같은 엔티티 인스턴스를 반환하기 때문에 참이다!
따라서 **영속성 컨텍스트는 성능상 이점과 엔티티의 동일성을 보장한다**

만약 영속성 컨텍스트에 member1이 없는데 위 코드를 실행한다면 결과가 같을까?
그렇다.
처음 member1에 대한 find 요청 시 엔티티 매니저는 데이터베이스에서 member1을 조회해서 1차 캐시에 저장하고 반환한다. 두번째 find 요청시에는 영속성 컨텍스트가 1차 캐시에 있는 member1 엔티티 인스턴스를 반환하므로 같은 결과가 된다.

---
## 엔티티 등록
### 트랜잭션을 지원하는 쓰기 지연
~~~ java
EntityManager em = emf.createEntityManager();
EntityTransaction transaction = em.getTransaction();
// 엔티티 매니저는 데이터 변경 시 트랜잭션을 시작해야 한다
transaction.begin(); // 트랜잭션 시작

em.persist(memberA);
em.persist(memberB);
// 여기까지 INSERT SQL을 데이터베이스에 보내지 않는다.

transaction.commit(); // 트랜잭션 커밋
~~~
 위는 엔티티 매니저를 사용해서 엔티티를 영속성 컨텍스트에 등록하는 코드다.
엔티티 매니저는 트랜잭션을 커밋하기 직전까지 데이터베이스에 엔티티를 저장하지 않고 내부 쿼리 저장소에 INSERT SQL을 모아둔다. 그리고 트랜잭션을 커밋할 때 모아둔 쿼리를 데이터베이스에 보내서 저장시킨다.
이를 트랜잭션을 지원하는 쓰기 지연이라 한다.

코드가 실행되는 과정을 그림으로 알아보자!

![image.png](https://images.velog.io/post-images/conatuseus/d4a2fb30-d09b-11e9-a657-a958e5af4073/image.png)

 위는 em.persist(memberA)가 실행되면 일어나는 일에 대한 그림이다.
 em.persist(memberA)가 실행되면, 영속성 컨텍스트는 1차 캐시에 memberA에 대한 엔티티를 저장하면서 동시에 JPA가 이 entity를 분석해서 쓰기 지연 SQL 저장소에 INSERT 쿼리를 저장한다.
 (DB에 아직 INSERT 쿼리를 보내지 않는다!!)
 
 
![image.png](https://images.velog.io/post-images/conatuseus/51c8cae0-d09c-11e9-b275-49c1db32880d/image.png)
 
 위는 em.persist(memberB)가 실행되면 일어나는 일에 대한 그림이다.
 em.persist(memberB)가 실행되면, memberA와 같은 작업이 실행된다.
 (DB에 아직 INSERT 쿼리를 보내지 않는다!!)
 
 
 그럼 쓰기 지연 SQL 저장소에 저장된 쿼리들이 DB에 날라가는 시점은 언제인가?
그 시점은 코드에서 보이는 트랜잭션을 커밋하는 순간이다.
 
![image.png](https://images.velog.io/post-images/conatuseus/eb6c9c30-d09c-11e9-b0db-1597a34a142f/image.png)

 트랜잭션을 commit하면, 엔티티 매니저는 영속성 컨텍스트를 플러시(flush) 한다. 플러시는 영속성 컨텍스트의 변경 내용을 데이터베이스에 동기화하는 작업인데 이때 등록, 수정, 삭제한 엔티티를 데이터베이스에 반영한다.
 
 ---
 ## 엔티티 수정
 ### SQL 수정 쿼리의 문제점
 SQL을 사용하면 수정 쿼리를 직접 작성해야 한다. 그런데 프로젝트가 점점 커지고 요구사항이 늘어나면서 수정 쿼리도 점점 추가된다.
  이런 방식의 문제점은 수정 쿼리가 많아지는 것은 물론이고 비지니스 로직을 분석하기 위해 SQL을 계속 확인해야 한다. 결국 직접적이든 간접적이든 비지니스 로직이 SQL에 의존하게 된다.
  
 ### 변경 감지
~~~ java
EntityManager em = emf.createEntityManager();
EntityTransaction transaction = em.getTransaction();
transaction.begin() // 트랜잭션 시작
  
// 영속 엔티티 조회
Member memberA = em.find(Member.class, "memberA");

// 영속 엔티티 데이터 수정
memberA.setUsername("hi");
memberA.setAge(10);

transaction.commit(); // 트랜잭션 커밋
~~~

 위는 JPA의 엔티티 수정 코드다.
`em.update()` 같은 메서드가 없이 memberA에 대한 setter로만 변경했는데 어떻게 데이터베이스의 엔티티가 수정되는 걸까?
그 이유는 JPA가 **변경 감지(dirty checking)** 기능이 있기 때문이다.
변경 감지는 엔티티의 변경사항을 데이터베이스에 자동으로 반영하는 기능이다.


![image.png](https://images.velog.io/post-images/conatuseus/b5d57200-d0a0-11e9-90a8-3bdc8e61daef/image.png)

 위 그림을 단계별로 살펴보자.
 (JPA는 엔티티를 영속성 컨텍스트에 보관할 때, 최초 상태를 복사해서 저장해두는데 이것을 **스냅샷**이라 한다)
 1. 트랜잭션을 커밋하면 엔티티 매니저 내부에서 먼저 플러시(flush())가 호출된다.
 2. 엔티티와 스냅샷을 비교해서 변경된 엔티티를 찾는다.
 3. 변경된 엔티티가 있으면 수정 쿼리를 생성해서 쓰기 지연 SQL 저장소에 보낸다.
 4. 쓰기 지연 저장소의 SQL을 데이터베이스에 보낸다.
 5. 데이터베이스 트랜잭션을 커밋한다.
 
 > **변경 감지**는 영속성 컨텍스트가 관리하는 영속 상태의 엔티티에만 적용된다
 비영속, 준영속처럼 영속성 컨텍스트의 관리를 받지 못하는 엔티티는 값을 변경해도 데이터베이스에 반영되지 않는다
 
 
그럼 변경 감지로 인해 실행된 UPDATE SQL의 쿼리는 변경된 부분만 수정 쿼리가 생성될까?

아니다. 
JPA의 기본 전략은 엔티티의 모든 필드를 업데이트 한다. 모든 필드를 업데이트하면 데이터베이스에 보내는 데이터 전송량이 증가하는 단점이 있지만, 다음과 같은 장점으로 인해 모든 필드를 업데이트 한다.
- 모든 필드를 사용하면 수정 쿼리가 항상 같다. 따라서 애플리케이션 로딩 시점에 수정 쿼리를 미리 생성해두고 재사용할 수 있다.
- 데이터베이스에 동일한 쿼리를 보내면 데이터베이스는 이전에 한 번 파싱된 쿼리를 재사용할 수 있다.

---
## 엔티티 삭제
~~~ java
Member memberA = em.find(Member.class, "memberA");
em.remove(memberA);
~~~
 em.remove()에 삭제 대상 엔티티를 넘겨주면 엔티티를 삭제한다.
물론 엔티티를 즉시 삭제하는 것이 아니라, 엔티티 등록과 비슷하게 삭제 쿼리를 쓰기 지연 SQL 저장소에 등록한다.
이후 트랜잭션을 커밋해서 플러시를 호출하면 실제 데이터베이스에 삭제 쿼리를 전달한다.
참고: em.remove(memberA)를 호출하는 순간 memberA는 영속성 컨텍스트에서 제거된다.

---

# 플러시
플러시(`flush()`)는 영속성 컨텍스트의 변경 내용을 데이터베이스에 반영한다. 
플러시를 실행하면 다음과 같은 일이 일어난다.
 1. 변경 감지가 동작해서 영속성 컨텍스트에 있는 모든 엔티티를 스냅샷과 비교해서 수정된 엔티티를 찾는다.
 2. 수정된 엔티티는 수정 쿼리를 만들어 쓰기 지연 SQL 저장소에 등록한다.
 3. 쓰기 지연 SQL 저장소의 쿼리를 데이터베이스에 전송한다.(등록, 수정, 삭제 쿼리)
 
 --- 
 
## 영속성 컨텍스트를 플러시 하는 3가지 방법
- **em.flush() - 직접 호출**
  엔티티 매니저의 flush() 메서드를 직접 호출해서 영속성 컨텍스트를 강제로 플러시한다.

- **트랜잭션 커밋 - 플러시 자동 호출**
  데이터베이스에 변경 내용을 SQL로 전달하지 않고 트랜잭션만 커밋하면 어떤 데이터도 데이터베이스에 반영되지 않는다. 따라서 트랜잭션을 커밋하기 전에 꼭 플러시를 호출해서 영속성 컨텍스트의 변경 내용을 데이터베이스에 반영해야 한다. JPA는 이런 문제를 예방하기 위해 트랜잭션을 커밋할 때 플러시를 자동으로 호출한다.
- **JPQL 쿼리 실행 - 플러시 자동 호출**
  JPQL이나 Criteria 같은 객체지향 쿼리를 호출할 때도 플러시가 실행된다.


--- 

## 플러시 모드 옵션
- **FlushModeType.AUTO**: 커밋이나 쿼리를 실행할 때 플러시(기본값)
- **FlushModeType.COMMIT**: 커밋할 때만 플러시
  JPQL 쿼리 실행시 플러시가 자동으로 일어나는데, 만약 JPQL에서 사용할 테이블이 이전 작업들과 전혀 관련이 없다면 이 옵션으로 플러시를 커밋할 때로 변경할 수 있다.
  
## 플러시는!
- **영속성 컨텍스트를 비우지는 않음!!**
- 영속성 컨텍스트의 변경내용을 데이터베이스에 동기화
- 트랜잭션이라는 작업 단위가 중요 -> 커밋 직전에만 동기화하면 됨


---

# 준영속 상태
 영속성 컨텍스트가 관리하는 영속 상태의 엔티티가 영속성 컨텍스트에서 분리된(detached) 것을 **준영속 상태**라 한다. 따라서 **준영속 상태의 엔티티는 영속성 컨텍스트가 제공하는 기능을 사용할 수 없다.**
준영속 상태로 만드는 3가지 방법
- em.detach(entity): 특정 엔티티만 준영속 상태로 전환
- em.clear(): 영속성 컨텍스트를 완전히 초기화
- em.close(): 영속성 컨텍스트를 종료

각각에 대해 자세히 알아보자
## 엔티티를 준영속 상태로 전환: detach()
~~~ java
Member member = new Member();
member.setId("memberA");
member.setUsername("회원A");

// member 엔티티를 영속 상태로
em.persist(member);

// member 엔티티를 영속성 컨텍스트에서 분리, 준영속 상태
em.detach(member);

transaction.commit();
~~~
위 코드를 실행하면 데이터베이스에 member가 저장될까?
아니다. member 엔티티를 영속 상태로 만들고 다시 deach()를 통해 준영속 상태로 전환시켰기 때문에 영속성 컨텍스트가 지원하는 어떤 기능도 동작하지 않는다. (쓰기 지연 SQL 저장소의 INSERT SQL도 제거됨)

## 영속성 컨텍스트 초기화: clear()
~~~ java
// 엔티티 조회, 영속 상태
Member member = em.find(Member.class, "memberA");

em.clear();  // 영속성 컨텍스트 초기화

// 준영속 상태
member.setUsername("changeName");
~~~
위 코드를 실행하면 데이터베이스의 memberA 이름이 바뀔까?
아니다. clear을 통해 영속성 컨텍스트를 초기화 했으므로 member.setUsername 메서드를 실행할 때는 영속성 컨텍스트가 지원하는 변경 감지가 동작하지 않는다.


## 영속성 컨텍스트 종료: close()
 영속성 컨텍스트를 종료하면 해당 영속성 컨텍스트가 관리하던 영속 상태의 엔티티가 모두 준영속 상태가 된다.


> 읽어주셔서 감사합니다.
피드백, 질문 환영합니다.
