# SRP(Single Responsebility Principle): 단일 책임 원칙

**객체는 단 하나의 책임만 가져야 한다.**

설계를 잘한 프로그램은 기본적으로 새로운 요구사항과 프로그램 변경에 영향을 받는 부분이 적다. 다시말해, 응집도는 높고 결합도는 낮은 프로그램을 뜻한다. 만약 한 클래스가 수행할 수 있는 기능, 즉 책임이 많아진다. 책임이 많아지면 클래스 내부의 함수끼리 강한 결합을 발생할 가능성이 높아진다. 이는 유지보수에 비용이 증가하게 되므로 따라서 책임을 분리시킬 필요가 있다.



# OCP(Open-Closed Principle): 개방 폐쇄 원칙

**기존의 코드를 변경하지 않으면서 기능을 수정하거나 추가할 수 있어야 한다.**

OCP에 만족하는 설계를 할 때 **변경되는 것이 무엇인지에 초점**을 맞춘다. 자주 변경되는 내용은 수정하기 쉽게 설계 하고, 변경되지 않아야 하는 것은 수정되는 내용에 영향을 받지 않게 하는 것이 포인트다. 이를 위해 **자주 사용되는 문법이 인터페이스(Interface)**이다



# LSP(Liskov Substitution Principle): 리스코프 치환 원칙

**자식 클래스는 최소한 자신의 부모 클래스에서 가능한 행위는 수행할 수 있어야 한다.**

LSP는 부모 클래스와 자식 클래스 사이의 행위가 일관성이 있어야 한다는 의미다.
즉, LSP를 만족하면 프로그램에서 부모 클래스의 인스턴스 대신에 자식 클래스의 인스턴스로 대체해도 프로그램의 의미는 변화되지 않는다.

상속 관계에서는 일반화 관계(IS-A)가 성립해야 한다. 일반화 관계에 있다는 것은 일관성이 있다는 것이다. 따라서 리스코프 치환 원칙은 일반화 관계에 대해 묻는 것이라 할 수 있다.

LSP를 만족시키는 간단한 방법은 재정의하지 않는 것이다.
즉, 부모 클래스에서 상속받은 메서드들이 자식 클래스에 오버라이드, 즉 재정의되지 않도록 하면 된다.



# ISP(Interface Segregation Principle): 인터페이스 분리 원칙

**한 클래스는 자신이 사용하지 않는 인터페이스는 구현하지 말아야 한다. 하나의 일반적인 인터페이스보다는, 여러 개의 구체적인 인터페이스가 낫다.**

예시)



![image](https://user-images.githubusercontent.com/22893111/74603087-18b4d280-50f3-11ea-9de7-e390e5962734.png)

- 복합기 기능을 제공하는 클래스는 매우 비대해질 가능성이 크다.
- 하지만 복합기의 모든 기능을 클라이언트가 동시에 사용하는 경우는 거의 없다.
- 팩스 기능의 변경으로 인해 프린터 기능만 이용하는 클라이언트가 영향을 받을 수 있다.
- 이렇게 클라이언트와 무관하게 발생한 변화로 클라이언트 자신이 영향을 받지 않으려면 범용의 인터페이스보다는 클라이언트에 특화된 인터페이스를 사용해야 한다.



ISP를 만족하는 복합기 클래스 다이어그램



![image](https://user-images.githubusercontent.com/22893111/74603089-1c485980-50f3-11ea-8de0-375dd84c2d59.png)



- 복합기를 사용하는 객체들마다 자신이 관심을 갖는 메서드들만 있는 인터페이스를 제공받도록 설계했다.
- 인터페이스가 일종의 방화벽 역할을 수행
- 클라이언트는 자신이 사용하지 않는 메서드에 생긴 변화로 인한 영향을 받지 않게 된다.



# DIP(Dependency Inversion Principle): 의존 역전 원칙

**의존 관계를 맺을 때 변화하기 쉬운 것 또는 자주 변화하는 것보다는 변화하기 어려운 것, 거의 변화가 없는 것에 의존하라는 것.**



DIP를 만족하는 설계 예시

![image](https://user-images.githubusercontent.com/22893111/74603210-8a415080-50f4-11ea-82b4-7330de04b89c.png)

- 객체지향 관점에서 변하기 어려운 추상적인 것들을 표현하는 수단
  - **추상 클래스**
  - **인터페이스**

- **DIP를 만족시키는 방법**
  - 어떤 클래스가 도움을 받을 때 구체적인 클래스보다는 **인터페이스나 추상 클래스**와 의존 관계를 맺도록 설계해야 한다.
    

